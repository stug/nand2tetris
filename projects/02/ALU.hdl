// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    // maybe zero and negate X
    Mux16(a=x, b[0..15]=false, sel=zx, out=zeroedX);
    Not16(in=zeroedX, out=zeroedNegatedX);
    Mux16(a=zeroedX, b=zeroedNegatedX, sel=nx, out=preparedX);

    // maybe zero and negate Y
    Mux16(a=y, b[0..15]=false, sel=zy, out=zeroedY);
    Not16(in=zeroedY, out=zeroedNegatedY);
    Mux16(a=zeroedY, b=zeroedNegatedY, sel=ny, out=preparedY);

    // Add and And x and y and choose which to use for the output
    Add16(a=preparedX, b=preparedY, out=xPlusY);
    And16(a=preparedX, b=preparedY, out=xAndY);
    Mux16(a=xAndY, b=xPlusY, sel=f, out=notNegatedOutput);

    // Maybe negate the output (outputting to a bunch of different places for
    // various purposes, the most important being the overall output of the ALU.
    Not16(in=notNegatedOutput, out=negatedOutput);
    Mux16(a=notNegatedOutput, b=negatedOutput, sel=no, out=out, out[15]=outputMSB,
        out[0..7]=firstHalfOutput, out[8..15]=secondHalfOutput);

    // output is negative if MSB is 1)
    And(a=true, b=outputMSB, out=ng);

    // output is 0 if none of its bits are 1 (is this the best way to do this..?)
    Or8Way(in=firstHalfOutput, out=anyFirstHalf);
    Or8Way(in=secondHalfOutput, out=anySecondHalf);
    Or(a=anyFirstHalf, b=anySecondHalf, out=any);
    Not(in=any, out=zr);
}
